/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pmm_allocator.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vvaucoul <vvaucoul@student.42.Fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/10/22 14:06:57 by vvaucoul          #+#    #+#             */
/*   Updated: 2022/10/22 19:23:50 by vvaucoul         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
** PMM ALLOCATOR
** LIBRARY: PMM_ALLOCATOR
**
** Usage: Tool to allocate memory in blocks fastly
*/

#include <memory/pmm_allocator.h>

PMM_BLOCK *__blocks = NULL;
PMM_BLOCK *__first_free_block = NULL;
PMM_BLOCK *__last_block = NULL;

/*******************************************************************************
 *                               ALLOCATOR UTILS                               *
 ******************************************************************************/

static PMM_BLOCK *__pmm_allocator_get_tmp_block(void)
{
    __t_pmm_block *tmp = __blocks;
    assert(tmp == NULL);
    return (tmp);
}

static void __pmm_allocator_set_block(PMM_BLOCK *block, __pmm_physical_addr_t addr, uint32_t size, __pmm_state_t state, int id)
{
    block->addr = addr;
    block->size = size;
    block->state = state;
    block->id = id;
}

static void __pmm_allocator_set_block_next(PMM_BLOCK *block, PMM_BLOCK *next)
{
    block->list.next = next;
}

static void __pmm_allocator_set_block_prev(PMM_BLOCK *block, PMM_BLOCK *prev)
{
    block->list.prev = prev;
}

static void __pmm_allocator_update_references(PMM_BLOCK *root, PMM_BLOCK *first_free_block, PMM_BLOCK *last_block)
{
    if (root != NULL)
        __blocks = root;
    if (first_free_block != NULL)
        __first_free_block = first_free_block;
    if (last_block != NULL)
        __last_block = last_block;
}

static PMM_BLOCK *__pmm_allocator_get_first_free_block(void)
{
    return (__first_free_block);
}

static PMM_BLOCK *__pmm_allocator_get_last_block(void)
{
    return (__last_block);
}

static void __pmm_allocator_update_first_free_block(void)
{
    PMM_BLOCK *tmp = __pmm_allocator_get_tmp_block();

    while (tmp->list.next != NULL)
    {
        if (tmp->state == PMM_BLOCK_FREE)
        {
            __first_free_block = tmp;
            return;
        }
        tmp = tmp->list.next;
    }
}

static void __pmm_allocator_update_last_block(void)
{
    PMM_BLOCK *tmp = __pmm_allocator_get_tmp_block();

    while (tmp->list.next != NULL)
    {
        tmp = tmp->list.next;
    }
    __last_block = tmp;
}

static PMM_BLOCK *__pmm_allocator_get_first_free_block_by_size(uint32_t size)
{
    PMM_BLOCK *tmp = __pmm_allocator_get_tmp_block();

    while (tmp->list.next != NULL)
    {
        if (tmp->state == PMM_BLOCK_FREE && tmp->size >= size)
        {
            PMM_BLOCK *tmp_next = tmp;
            uint32_t i = 0;

            for (; tmp_next->list.next != NULL && i < size; ++i)
            {
                if (tmp_next->state == PMM_BLOCK_FREE)
                {
                    tmp_next = tmp_next->list.next;
                }
                else
                    break;
            }
            if (i == size)
            {
                __first_free_block = tmp;
                return (tmp);
            }
        }
        tmp = tmp->list.next;
    }
    return (PMM_ERROR_ADDR);
}

static void *__pmm_allocator_alloc_block(void)
{
    PMM_BLOCK *tmp = __pmm_allocator_get_first_free_block();

    if (tmp == NULL)
        return (PMM_ERROR_ADDR);
    tmp->state = PMM_BLOCK_USED;
    __pmm_allocator_update_first_free_block();
    return (tmp->addr);
}

/*******************************************************************************
 *                                  ALLOCATOR                                  *
 ******************************************************************************/

int __pmm_allocator_init_blocks(uint32_t max_size)
{
    uint32_t i = 0;
    PMM_BLOCK *tmp = __PMM_GET_TMP_BLOCK();
    PMM_BLOCK *prev = NULL;

    do
    {
        __PMM_SET_BLOCK(tmp, PMM_NULL_ADDR, PMM_DEFAULT_ADDR_VALUE, PMM_BLOCK_FREE, i);
        __PMM_SET_BLOCK_NEXT(tmp, NULL);
        __PMM_SET_BLOCK_PREV(tmp, prev);

        prev = tmp;

        __PMM_SHIFT_BLOCK(tmp);
        __PMM_SET_BLOCK_NEXT(prev, tmp);
        ++i;
    } while (i < max_size);

    __PMM_UPDATE_REFERENCES(__blocks, __blocks, tmp);

    return (PMM_SUCCESS);
}

int __pmm_allocator_init(__pmm_physical_addr_t bitmap)
{
    __blocks = (PMM_BLOCK *)bitmap;
    assert(__blocks == NULL);
    __pmm_allocator_init_blocks(PMM_SIZE);
    return (PMM_SUCCESS);
}